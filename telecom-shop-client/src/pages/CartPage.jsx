import React, { useEffect, useState } from 'react';
import axios from 'axios';
import '../../styles/cart.css';
import '../../styles/global.css';

function CartPage() {
  const [cartItems, setCartItems] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [orderInfo, setOrderInfo] = useState({
    name: '',
    phone: '',
    address: '',
    note: '',
  });
  const token = localStorage.getItem('token');

  useEffect(() => {
    fetchCart();
  }, []);

  const fetchCart = async () => {
    try {
      const res = await axios.get('http://localhost:8080/cart', {
        headers: { Authorization: `Bearer ${token}` },
      });
      setCartItems(res.data);
    } catch (err) {
      console.error('‚ùå L·ªói khi l·∫•y gi·ªè h√†ng:', err);
    }
  };

  const updateQuantity = async (itemId, newQuantity) => {
    if (newQuantity < 1) return;
    try {
      await axios.put(
        `http://localhost:8080/cart/${itemId}`,
        { quantity: newQuantity },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      fetchCart();
    } catch (err) {
      console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:', err);
    }
  };

  const removeItem = async (id) => {
    if (!window.confirm('X√≥a s·∫£n ph·∫©m n√†y kh·ªèi gi·ªè?')) return;
    try {
      await axios.delete(`http://localhost:8080/cart/${id}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      fetchCart();
    } catch (err) {
      console.error('‚ùå L·ªói khi xo√° s·∫£n ph·∫©m:', err);
    }
  };

  const calculateTotal = () => {
    return cartItems.reduce((total, item) => {
      return total + item.quantity * (item.product?.price || 0);
    }, 0);
  };

  const handleSubmitOrder = async () => {
    if (!orderInfo.name || !orderInfo.phone || !orderInfo.address) {
      alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.');
      return;
    }

    try {
      const total = calculateTotal(); // ‚úÖ Th√™m d√≤ng n√†y ƒë·ªÉ t√≠nh t·ªïng
      const payload = { ...orderInfo, total }; // ‚úÖ G·ªôp orderInfo v·ªõi t·ªïng ti·ªÅn

      await axios.post('http://localhost:8080/orders', payload, {
        headers: { Authorization: `Bearer ${token}` },
      });

      alert('‚úÖ ƒê·∫∑t h√†ng th√†nh c√¥ng!');
      setShowForm(false);
      setOrderInfo({ name: '', phone: '', address: '', note: '' });
      fetchCart(); // l√†m tr·ªëng l·∫°i gi·ªè h√†ng
    } catch (err) {
      console.error('‚ùå L·ªói khi ƒë·∫∑t h√†ng:', err);
      alert('‚ùå ƒê·∫∑t h√†ng th·∫•t b·∫°i!');
    }
  };


  return (
    <div className="cart-container">
      <h2 className="cart-title">üõí Gi·ªè h√†ng c·ªßa b·∫°n</h2>
      {cartItems.length === 0 ? (
        <p>Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o trong gi·ªè h√†ng.</p>
      ) : (
        <>
          <table className="cart-table">
            <thead>
              <tr>
                <th>S·∫£n ph·∫©m</th>
                <th>S·ªë l∆∞·ª£ng</th>
                <th>Gi√°</th>
                <th>Thao t√°c</th>
              </tr>
            </thead>
            <tbody>
              {cartItems.map((item) => (
                <tr key={item.id}>
                  <td className="product-info">
                    <img
                      src={item.product?.image_url}
                      alt={item.product?.name}
                      onError={(e) => {
                        e.target.src = 'https://via.placeholder.com/60x60';
                      }}
                    />
                    <span>{item.product?.name}</span>
                  </td>
                  <td>
                    <div className="qty-control">
                      <button onClick={() => updateQuantity(item.id, item.quantity - 1)} disabled={item.quantity <= 1}>‚àí</button>
                      <span>{item.quantity}</span>
                      <button onClick={() => updateQuantity(item.id, item.quantity + 1)}>Ôºã</button>
                    </div>
                  </td>
                  <td>{Number(item.product?.price).toLocaleString()} VNƒê</td>
                  <td>
                    <button onClick={() => removeItem(item.id)}>üóëÔ∏è Xo√°</button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>

          <div className="cart-summary">
            <h3>T·ªïng c·ªông: {calculateTotal().toLocaleString()} VNƒê</h3>
            <button className="checkout-btn" onClick={() => setShowForm(true)}>üöö ƒê·∫∑t h√†ng</button>
          </div>
        </>
      )}

      {showForm && (
        <div className="order-form">
          <h3>üì¶ Th√¥ng tin nh·∫≠n h√†ng</h3>
          <input
            type="text"
            placeholder="H·ªç t√™n"
            value={orderInfo.name}
            onChange={(e) => setOrderInfo({ ...orderInfo, name: e.target.value })}
            required
          />
          <input
            type="tel"
            placeholder="S·ªë ƒëi·ªán tho·∫°i"
            value={orderInfo.phone}
            onChange={(e) => setOrderInfo({ ...orderInfo, phone: e.target.value })}
            required
          />
          <input
            type="text"
            placeholder="ƒê·ªãa ch·ªâ"
            value={orderInfo.address}
            onChange={(e) => setOrderInfo({ ...orderInfo, address: e.target.value })}
            required
          />
          <textarea
            placeholder="Ghi ch√∫ (tu·ª≥ ch·ªçn)"
            value={orderInfo.note}
            onChange={(e) => setOrderInfo({ ...orderInfo, note: e.target.value })}
          ></textarea>
          <button className="confirm-btn" onClick={handleSubmitOrder}>‚úÖ X√°c nh·∫≠n ƒë·∫∑t h√†ng</button>
          <button className="cancel-btn" onClick={() => setShowForm(false)}>‚ùå H·ªßy</button>
        </div>
      )}
    </div>
  );
}

export default CartPage;
