package controllers

import (
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/sdafbja/telecom-shop/config"
	"github.com/sdafbja/telecom-shop/models"
)

// üßæ T·∫°o ƒë∆°n h√†ng t·ª´ gi·ªè h√†ng v√† th√¥ng tin x√°c nh·∫≠n (name, phone, address, note)
// CreateOrder godoc
// @Summary T·∫°o ƒë∆°n h√†ng
// @Description T·∫°o ƒë∆°n h√†ng t·ª´ gi·ªè h√†ng v√† th√¥ng tin x√°c nh·∫≠n (t√™n, s·ªë ƒëi·ªán tho·∫°i, ƒë·ªãa ch·ªâ, ghi ch√∫)
// @Tags Orders
// @Accept json
// @Produce json
// @Param order body struct{ name string; phone string; address string; note string } true "Th√¥ng tin x√°c nh·∫≠n ƒë∆°n h√†ng"
// @Success 201 {object} models.Order
// @Failure 400 {object} map[string]string
// @Failure 500 {object} map[string]string
// @Router /orders [post]
// @Security BearerAuth


func CreateOrder(c *gin.Context) {
	userID := c.GetUint("user_id")

	var input struct {
		Name    string  `json:"name"`
		Phone   string  `json:"phone"`
		Address string  `json:"address"`
		Note    string  `json:"note"`
	}
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "D·ªØ li·ªáu x√°c nh·∫≠n kh√¥ng h·ª£p l·ªá"})
		return
	}

	// L·∫•y gi·ªè h√†ng
	var cartItems []models.Cart
	if err := config.DB.Preload("Product").Where("user_id = ?", userID).Find(&cartItems).Error; err != nil || len(cartItems) == 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Gi·ªè h√†ng tr·ªëng ho·∫∑c kh√¥ng th·ªÉ truy c·∫≠p"})
		return
	}

	var total float64
	var orderItems []models.OrderItem
	for _, item := range cartItems {
		subtotal := float64(item.Quantity) * item.Product.Price
		total += subtotal

		orderItems = append(orderItems, models.OrderItem{
			ProductID: item.ProductID,
			Quantity:  item.Quantity,
			Price:     item.Product.Price,
		})
	}

	// T·∫°o ƒë∆°n h√†ng
	order := models.Order{
		UserID:    userID,
		Name:      input.Name,
		Phone:     input.Phone,
		Address:   input.Address,
		Note:      input.Note,
		Total:     total,
		Status:    "pending",
		CreatedAt: time.Now(),
		Items:     orderItems,
	}

	if err := config.DB.Create(&order).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng"})
		return
	}

	config.DB.Where("user_id = ?", userID).Delete(&models.Cart{})

	c.JSON(http.StatusCreated, order)
}



// üë§ Xem ƒë∆°n h√†ng c·ªßa ch√≠nh m√¨nh
// GetMyOrders godoc
// @Summary Xem ƒë∆°n h√†ng c√° nh√¢n
// @Description Tr·∫£ v·ªÅ danh s√°ch ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
// @Tags Orders
// @Produce json
// @Success 200 {array} models.Order
// @Failure 500 {object} map[string]string
// @Router /orders/my [get]
// @Security BearerAuth
func GetMyOrders(c *gin.Context) {
	userID := c.GetUint("user_id")
	var orders []models.Order

	err := config.DB.
		Preload("Items.Product").
		Where("user_id = ?", userID).
		Order("created_at DESC").
		Find(&orders).Error

	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Kh√¥ng th·ªÉ l·∫•y ƒë∆°n h√†ng"})
		return
	}

	c.JSON(http.StatusOK, orders)
}

// üõ†Ô∏è Admin: Xem t·∫•t c·∫£ ƒë∆°n h√†ng
// GetAllOrders godoc
// @Summary Qu·∫£n tr·ªã: Xem t·∫•t c·∫£ ƒë∆°n h√†ng
// @Description Tr·∫£ v·ªÅ danh s√°ch to√†n b·ªô ƒë∆°n h√†ng (ch·ªâ d√†nh cho Admin)
// @Tags Orders
// @Produce json
// @Success 200 {array} models.Order
// @Failure 500 {object} map[string]string
// @Router /admin/orders [get]
// @Security BearerAuth
func GetAllOrders(c *gin.Context) {
	var orders []models.Order

	err := config.DB.
		Preload("Items.Product").
		Order("created_at DESC").
		Find(&orders).Error

	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Kh√¥ng th·ªÉ truy v·∫•n ƒë∆°n h√†ng"})
		return
	}

	c.JSON(http.StatusOK, orders)
}
