package controllers


import (
	"net/http"
	"strconv"
	"strings"

	// "os"
	"path/filepath"

	"fmt"

	"github.com/gin-gonic/gin"
	"github.com/sdafbja/telecom-shop/config"
	"github.com/sdafbja/telecom-shop/models"
)
// GetAllProducts godoc
// @Summary L·∫•y danh s√°ch s·∫£n ph·∫©m
// @Description L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m, c√≥ th·ªÉ l·ªçc theo category_id v√† t√¨m ki·∫øm theo t√™n
// @Tags Products
// @Produce json
// @Param category_id query string false "ID danh m·ª•c"
// @Param search query string false "T·ª´ kh√≥a t√¨m ki·∫øm"
// @Success 200 {array} models.Product
// @Failure 500 {object} map[string]string
// @Router /products [get]
// L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m (c√≥ th·ªÉ l·ªçc theo category_id ho·∫∑c t√¨m ki·∫øm theo t√™n)
func GetAllProducts(c *gin.Context) {
	var products []models.Product
	categoryID := c.Query("category_id")
	search := strings.ToLower(c.Query("search"))

	query := config.DB.Model(&models.Product{}).Preload("Category")

	if categoryID != "" {
		query = query.Where("category_id = ?", categoryID)
	}

	if search != "" {
		query = query.Where(
			"LOWER(products.name) LIKE ? OR LOWER(products.description) LIKE ?",
			"%"+search+"%", "%"+search+"%",
		)
	}

	if err := query.Find(&products).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Kh√¥ng th·ªÉ l·∫•y danh s√°ch s·∫£n ph·∫©m"})
		return
	}

	c.JSON(http.StatusOK, products)
}

// T·∫°o s·∫£n ph·∫©m m·ªõi
// CreateProduct godoc
// @Summary T·∫°o s·∫£n ph·∫©m m·ªõi
// @Description T·∫°o s·∫£n ph·∫©m v·ªõi th√¥ng tin v√† ·∫£nh t·∫£i l√™n (ch·ªâ Admin)
// @Tags Products
// @Accept multipart/form-data
// @Produce json
// @Param name formData string true "T√™n s·∫£n ph·∫©m"
// @Param description formData string false "M√¥ t·∫£"
// @Param price formData number true "Gi√°"
// @Param category_id formData int true "ID danh m·ª•c"
// @Param image formData file false "·∫¢nh s·∫£n ph·∫©m"
// @Success 201 {object} models.Product
// @Failure 400 {object} map[string]string
// @Failure 500 {object} map[string]string
// @Router /products [post]
// @Security BearerAuth
func CreateProduct(c *gin.Context) {
	var product models.Product

	// L·∫•y d·ªØ li·ªáu t·ª´ multipart form
	name := c.PostForm("name")
	description := c.PostForm("description")
	priceStr := c.PostForm("price")
	categoryIDStr := c.PostForm("category_id")

	//  √âp ki·ªÉu d·ªØ li·ªáu
	price, err := strconv.ParseFloat(priceStr, 64)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Gi√° kh√¥ng h·ª£p l·ªá"})
		return
	}

	categoryID, err := strconv.Atoi(categoryIDStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Danh m·ª•c kh√¥ng h·ª£p l·ªá"})
		return
	}

	// G√°n d·ªØ li·ªáu
	product.Name = name
	product.Description = description
	product.Price = price
	product.CategoryID = uint(categoryID)

	
	file, err := c.FormFile("image")
	if err == nil {
		filename := filepath.Base(file.Filename)
		savePath := "uploads/" + filename // n∆°i l∆∞u th·∫≠t
		if err := c.SaveUploadedFile(file, savePath); err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "Kh√¥ng th·ªÉ l∆∞u ·∫£nh"})
			return
		}
		product.ImageURL = "/images/" + filename // ‚úÖ ƒë∆∞·ªùng d·∫´n public tr·∫£ v·ªÅ
	}

	// ‚úÖ T·∫°o s·∫£n ph·∫©m trong DB
	if err := config.DB.Create(&product).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Kh√¥ng th·ªÉ t·∫°o s·∫£n ph·∫©m"})
		return
	}

	c.JSON(http.StatusCreated, product)
}

// Xo√° s·∫£n ph·∫©m
// DeleteProduct godoc
// @Summary Xo√° s·∫£n ph·∫©m
// @Description Xo√° s·∫£n ph·∫©m theo ID (ch·ªâ Admin)
// @Tags Products
// @Produce json
// @Param id path int true "ID s·∫£n ph·∫©m"
// @Success 200 {object} map[string]string
// @Failure 400 {object} map[string]string
// @Failure 500 {object} map[string]string
// @Router /products/{id} [delete]
// @Security BearerAuth
func DeleteProduct(c *gin.Context) {
	id := c.Param("id")
	productID, err := strconv.Atoi(id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "ID kh√¥ng h·ª£p l·ªá"})
		return
	}

	if err := config.DB.Delete(&models.Product{}, productID).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Kh√¥ng th·ªÉ xo√° s·∫£n ph·∫©m"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "ƒê√£ xo√° s·∫£n ph·∫©m"})
}

// L·∫•y chi ti·∫øt s·∫£n ph·∫©m theo ID
// GetProductByID godoc
// @Summary L·∫•y chi ti·∫øt s·∫£n ph·∫©m
// @Description L·∫•y th√¥ng tin s·∫£n ph·∫©m theo ID
// @Tags Products
// @Produce json
// @Param id path int true "ID s·∫£n ph·∫©m"
// @Success 200 {object} models.Product
// @Failure 404 {object} map[string]string
// @Router /products/{id} [get]
func GetProductByID(c *gin.Context) {
	id := c.Param("id")
	fmt.Println("üîç G·ªçi API chi ti·∫øt s·∫£n ph·∫©m ID =", id)

	var product models.Product
	if err := config.DB.First(&product, id).Error; err != nil {
		fmt.Println("‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m:", err)
		c.JSON(http.StatusNotFound, gin.H{"error": "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m"})
		return
	}

	fmt.Println("‚úÖ T√¨m th·∫•y s·∫£n ph·∫©m:", product.Name)
	c.JSON(http.StatusOK, product)
}
